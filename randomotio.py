#! /usr/bin/env python

# Populate OpenTimelineIO timeline with randomly generated clips.
# Export to common NLE formats.
# igor at hdead.com

import opentimelineio as otio
from random import randint, choice
import sys
import os
import string
import datetime


def _rand_string(r=10):
    letters    = string.ascii_lowercase
    randString = ''.join(choice(letters) for i in range(r))

    return randString


def make_otio(trkCount, clpCount):

    otiort = otio.opentime.RationalTime

    # Create timeline instance and name it.
    timeline = otio.schema.Timeline()
    timeline.name = 'Generated with randomotio.py'

    # Set global start hour
    seconds = hr * 60**2
    hourOneFrames = otio.opentime.to_frames(otiort(value=seconds), rate=fps)
    timeline.global_start_time = otiort(hourOneFrames, fps)

    # Add some metadata to the timeline.
    timeline.metadata['Random OTIO'] = {'version': '0.1.0'}

    # Make a list containing video tracks.
    tracks = [otio.schema.Track() for _t in range(trkCount)]

    # Iterate video tracks and populate with clips.
    for trkIdx, trk in enumerate(tracks):

        # Set track name
        trk.name = 'V' + str(trkIdx + 1)

        # Add this track to the timeline.
        timeline.tracks.append(trk)

        # Make a list cotaining video clips for this track.
        clips = [otio.schema.Clip() for _c in range(clpCount)]

        # Iterate video clips.
        for clp in clips:

            # Crate a random string for the clip name.
            clpName  = _rand_string()
            clp.name = clpName

            # Set clip source range to random timecode in and duration.
            minDur = 1
            maxDur = int(10 * fps) # Maximum clip duration in seconds.
            maxTC  = hourOneFrames

            tcIn = randint(0, maxTC)
            dur  = randint(minDur, maxDur)

            clp.source_range = otio.opentime.TimeRange(
                start_time=otiort(tcIn, fps),
                duration=otiort(dur, fps)
                )

            # Add fake media reference.
            randPath1 = _rand_string(8)
            randPath2 = _rand_string(4)

            url = os.path.join(
                '/Volumes', 'FakeProject', randPath1, randPath2, clpName + '.mov'
                )

            clp.media_reference = otio.schema.ExternalReference(
                target_url=url,
                available_range = otio.opentime.TimeRange(
                    start_time=otiort(0, fps),
                    duration=otiort(86400, fps)
                    )
                )

            # Add some metadata to clips.
            timestamp = datetime.datetime.now()
            clp.metadata['Random OTIO'] = {
                'Creation Time': str(timestamp),
                'Generated By': 'randomotio.py'
                }

            # Add this clip to this track.
            trk.append(clp)

            # Make gaps half of the time
            if randint(0,1) == 1:

                gap = otio.schema.Gap()
                gap.source_range = otio.opentime.TimeRange(
                    duration=otio.opentime.RationalTime(dur, fps)
                    )
                gap.name = 'Black'
                trk.append(gap)

        # Set track start timecode to match the global start time.
        trk.source_range = otio.opentime.TimeRange(otiort(-hourOneFrames, 24), trk.duration())

    # Write OTIO file.
    otio.adapters.write_to_file(timeline, 'random.otio')

    # Uncomment to write other types of files.
    # otio.adapters.write_to_file(timeline, 'random.xml')
    # if trkCount == 1:
    #     otio.adapters.write_to_file(timeline, 'random.edl')



if __name__=='__main__':
    trkCount = int(input('How many tracks? '))
    clpCount = int(input('How many clips per track? '))

    # Hardcode frame rate and start hour.
    fps = 23.976
    hr = 1

    make_otio(trkCount, clpCount)
